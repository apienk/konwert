
	TRS
	---

Usage: trs [-[r]e] 'REPLACE_THIS WITH_THAT [AND_THIS WITH_THAT]...'
       trs [-[r]f] FILE
Copy stdin to stdout replacing every occurence of given strings with
other ones. This is similar to tr, but replaces strings, not only
single chars.

Rules (separated by whitespace) can be given directly after -e option,
or can be read from FILE. Argument not preceded by -e or -f is guessed
to be a script when it contains some whitespace, or a filename otherwise.

Comments are allowed from `#' until the end of line. The character `#'
in strings must be specified as `\#'.

Standard C-like escapes \a \b \e \f \n \r \t \v \\ \nnn are recognized.
In addition, \s means a space character and \! means an empty string.

Sets of acceptable characters at a given position can be specified
between \[ and \]. ASCII ranges in sets can be shortly written as
FIRST\-LAST. When a set consists of only a single range, \[ and \] can
be omitted.

When a part of the string to translate is enclosed in \{...\}, only that
part is replaced. Any text outside \{...\} serves as an assertion:
a string is translated only if it is preceded by the given text and
followed by another one. \{ at the beginning or \} at the end of the
string can be omitted. Text outside \{...\} is treated as untranslated.

Before the beginning of the file and after its end there are only \n's.
Thus, for example, \n\{.\}\n matches `.' on a line by itself, including
the first line, and the last one even without the \n marker.

A fragment of the form \?x=N, where x is a letter A-Za-z and N is a
digit 0-9, contained in the target text sets the variable x to the value
N when that rule succeeds. Similar fragment in the source text causes
the given rule to be considered only if that variable has such value.
Initially all variables have the value of 0. Several assignments or
conditions can be present in one rule - they are ANDed together.

Multiple -e or -f options are allowed. All rules are loaded together
then, and earlier ones have precedence.

Option -r means to reverse every rule and affects only the next -e or -f
option. Of course this doesn't have to give the reverse translation! Any
rule containing any of \{\}\[\]\- is taken in only one direction.
You may force any rule to be taken in only one direction by enclosing
the string to translate in \{...\}.

In addition, the following standard options are recognized:
  --help      display this help and exit
  --version   output version information and exit

Example:
$ echo Leeloo |trs -e 'el n e i i aqq o\}\n x o u'
Linux

The main difference between trs and `sed 's///g; ...'' (excluding sed's
regular expressions) is that sed takes every rule in the order specified
and applies it to the whole line of translated file, whereas trs
examines every position and tries all rules in this place first. In sed
every next rule is fed with the text produced by the previous one,
whereas in trs every piece of text can be translated at most once (if
more than one rule matches at a given position, the one mentioned
earlier wins). That's why sed isn't well suited for translating between
character sets. On the other hand, tr translates only single bytes, so
it can't be used for Unicode conversions, or TeX / SGML ways for
specifying extended characters.

Another example:
$ echo 642 |trs -e '4 7 72 66 64 4'
42
$ echo 642 |sed 's/4/7/g; s/72/66/g; s/64/4/g'
666

The string to replace can be empty; there must be something outside \{\}
then. In this special case only one such create-from-nothing rule can
success at a given position. For example, `\}\x80\-\xFF @' precedes
every character with high byte set with @. The rule of the form
`some\{ thing' doesn't work at the end of a file.


-- 
 __("<   Marcin Kowalczyk * qrczak@knm.org.pl http://qrczak.home.ml.org/
 \__/       GCS/M d- s+:-- a21 C+++>+++$ UL++>++++$ P+++ L++>++++$ E->++
  ^^                W++ N+++ o? K? w(---) O? M- V? PS-- PE++ Y? PGP->+ t
QRCZAK                  5? X- R tv-- b+>++ DI D- G+ e>++++ h! r--%>++ y-
